CREATE DATABASE pizzahut;

USE pizzahut;

SELECT * 
FROM pizzas;

SELECT * 
FROM pizza_types;

CREATE TABLE orders (
order_id INT NOT NULL,
order_date DATE NOT NULL,
order_time TIME NOT NULL,
PRIMARY KEY(order_id) 
);

SELECT *
FROM orders;

CREATE TABLE orders_details (
order_details_id INT NOT NULL,
order_id INT NOT NULL,
pizza_id TEXT NOT NULL,
quantity INT NOT NULL,
PRIMARY KEY(order_details_id) 
);

SELECT *
FROM orders_details;

SELECT *
FROM pizza_types;




-- Retrieve the total number of orders placed.

SELECT 
    COUNT(order_id) AS total_orders
FROM
    orders;



SELECT 
    COUNT(*)
FROM
    orders;




-- Calculate the total revenue generated from pizza sales.

SELECT 
    ROUND(SUM(price * quantity), 2) AS total_sales
FROM
    pizzas
        INNER JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id;





-- Identify the highest-priced pizza.


SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        INNER JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;





-- Identify the most common pizza size ordered.


SELECT 
    pizzas.size,
    COUNT(orders_details.quantity) AS total_quantity
FROM
    pizzas
        INNER JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id
GROUP BY pizzas.size
ORDER BY total_quantity DESC;





-- List the top 5 most ordered pizza types 
-- along with their quantities.

SELECT 
    pizza_types.name, SUM(orders_details.quantity) AS total_qq
FROM
    pizza_types
        INNER JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        INNER JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id
GROUP BY pizza_types.name
ORDER BY total_qq DESC
LIMIT 5;




-- find the total quantity of each pizza category ordered.

SELECT 
    pizza_types.category, SUM(orders_details.quantity)
FROM
    pizza_types
        INNER JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        INNER JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id
GROUP BY pizza_types.category
ORDER BY SUM(orders_details.quantity) DESC;




-- Determine the distribution of orders by hour of the day.

SELECT * FROM orders;


SELECT 
    HOUR(order_time) AS hours, COUNT(order_id) AS count_order
FROM
    orders
GROUP BY hours;




-- Join relevant tables to find the category-wise distribution of pizzas.



SELECT 
    category, COUNT(pizza_type_id)
FROM
    pizza_types
GROUP BY category;





-- Group the orders by date and 
-- calculate the average number of pizzas ordered per day. 


SELECT 
    ROUND(AVG(quantity), 0)
FROM
    (SELECT 
        orders.order_date, SUM(orders_details.quantity) AS quantity
    FROM
        orders
    JOIN orders_details ON orders.order_id = orders_details.order_id
    GROUP BY orders.order_date) AS order_quantity;




-- Determine the top 3 most ordered pizza types based on revenue.

SELECT 
    pizza_types.name,
    SUM(pizzas.price * orders_details.quantity) AS revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY revenue DESC
LIMIT 3;






-- Calculate the percentage contribution of each pizza type to total revenue.

SELECT 
    pizza_types.category,
    ROUND(SUM(pizzas.price * orders_details.quantity) / (SELECT 
                    ROUND(SUM(price * quantity), 2) AS total_sales
                FROM
                    pizzas
                        INNER JOIN
                    orders_details ON pizzas.pizza_id = orders_details.pizza_id) * 100,
            2) AS revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY revenue DESC;




-- Analyze the cumulative revenue generated over time.

SELECT order_date, SUM(revenue) OVER (ORDER BY order_date) AS cum_rev
FROM 
(SELECT orders.order_date, SUM(pizzas.price * orders_details.quantity) AS revenue
FROM pizzas
JOIN orders_details
ON pizzas.pizza_id = orders_details.pizza_id
JOIN orders
ON orders_details.order_id = orders.order_id
GROUP BY orders.order_date) AS sales;




-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

SELECT name, revenue
FROM
(SELECT category, name, revenue,
RANK() OVER(PARTITION BY category ORDER BY revenue DESC) AS rn 
FROM 
(SELECT pizza_types.category, pizza_types.name, SUM(pizzas.price * orders_details.quantity) AS revenue
FROM pizza_types
JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN orders_details
ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category, pizza_types.name) AS a) AS b
WHERE rn <= 3;





